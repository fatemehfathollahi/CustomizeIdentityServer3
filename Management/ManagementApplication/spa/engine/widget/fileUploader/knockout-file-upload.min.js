define(["ko", "jquery", "styler"], function (n, t, i) { function o(n, t) { var r = {}; for (var i in n) r[i] = typeof t[i] != "undefined" ? t[i] : n[i]; return r } function s(n, t, i) { var t = Array.isArray(t) ? t : t.split(" "); return t.forEach(function (t) { n.classList[i](t) }), n } function r(n, t) { return s(n, t, "add") } function e(n, t) { return s(n, t, "remove") } function h(n, t) { return n.classList.contains(t) } var u, f; i.load("/Content/fileUpload/knockout-file-uploader.css"); u = { customFileInputSystemOptions: { wrapperClass: "custom-file-input-wrapper", fileNameClass: "custom-file-input-file-name", buttonGroupClass: "custom-file-input-button-group", buttonClass: "custom-file-input-button", clearButtonClass: "custom-file-input-clear-button", buttonTextClass: "custom-file-input-button-text" }, defaultOptions: { wrapperClass: "input-group", fileNameClass: "disabled form-control", noFileText: "No photos selected", buttonGroupClass: "input-group-btn", buttonClass: "btn btn-primary", clearButtonClass: "btn btn-default", buttonText: "Choose Picture", changeButtonText: "Change Picture", clearButtonText: "Delete Picture", fileName: !0, clearButton: !0, onClear: function (n) { typeof n.clear == "function" && n.clear() } } }; f = window.URL || window.webkitURL; n.bindingHandlers.fileInput = { init: function (t, i) { t.onchange = function () { var r = n.utils.unwrapObservable(i()) || {}, e, o, u; if (r.dataUrl && (r.dataURL = r.dataUrl), r.objectUrl && (r.objectURL = r.objectUrl), r.file = r.file || n.observable(), r.fileArray = r.fileArray || n.observableArray([]), e = this.files[0], r.fileArray([]), e) { for (o = [], u = 0; u < this.files.length; u++) o.push(this.files[u]); r.fileArray(o); r.file(e) } r.clear || (r.clear = function () { ["objectURL", "base64String", "binaryString", "text", "dataURL", "arrayBuffer"].forEach(function (t) { var i, u; if (r[t + "Array"] && n.isObservable(r[t + "Array"])) for (i = r[t + "Array"]; i().length;) u = i.splice(0, 1), t == "objectURL" && f.revokeObjectURL(u); r[t] && n.isObservable(r[t]) && r[t](null) }); t.value = ""; r.fileArray([]); r.file(null) }); n.isObservable(i()) && i()(r) }; t.onchange(); n.utils.domNodeDisposal.addDisposeCallback(t, function () { var t = n.utils.unwrapObservable(i()) || {}; t.clear = undefined }) }, update: function (t, i) { function u(t, i) { var u, e; r.objectURL && n.isObservable(r.objectURL) && (u = t && f.createObjectURL(t), u && (e = r.objectURL(), e && f.revokeObjectURL(e), r.objectURL(u))); r.base64String && n.isObservable(r.base64String) && (r.dataURL && n.isObservable(r.dataURL) || (r.dataURL = n.observable())); r.base64StringArray && n.isObservable(r.base64StringArray) && (r.dataURLArray && n.isObservable(r.dataURLArray) || (r.dataURLArray = n.observableArray()));["binaryString", "text", "dataURL", "arrayBuffer"].forEach(function (u) { var e = "readAs" + (u.substr(0, 1).toUpperCase() + u.substr(1)), f; if (u != "dataURL" && !(r[u] && n.isObservable(r[u])) || !t) return !0; f = new FileReader; f.onload = function (t) { function f(t, u) { i == 0 && r[u] && n.isObservable(r[u]) && r[u](t); r[u + "Array"] && n.isObservable(r[u + "Array"]) && (i == 0 && r[u + "Array"]([]), r[u + "Array"].push(t)) } if (f(t.target.result, u), e == "readAsDataURL" && (r.base64String || r.base64StringArray)) { var o = t.target.result.split(","); o.length === 2 && f(o[1], "base64String") } }; f[e](t) }) } var r = n.utils.unwrapObservable(i()); r.fileArray().forEach(function (n, t) { u(n, t) }) } }; n.bindingHandlers.fileDrag = { update: function (t, i) { var u = n.utils.unwrapObservable(i()) || {}; t.getAttribute("file-drag-injected") || (r(t, "filedrag"), t.ondragover = t.ondragleave = t.ondrop = function (f) { var o, h, c, s; if (f.stopPropagation(), f.preventDefault(), f.type == "dragover" ? r(t, "hover") : e(t, "hover"), f.type == "drop" && f.dataTransfer && (o = f.dataTransfer.files, h = o[0], u.fileArray([]), h)) { for (c = [], s = 0; s < o.length; s++) c.push(o[s]); u.fileArray(c); u.file(h); n.isObservable(i()) && i()(u) } }, t.setAttribute("file-drag-injected", 1)) } }; n.bindingHandlers.customFileInput = { init: function (t, i) { var s = n.utils.unwrapObservable(i()), c, a, l; if (s !== !1) { typeof s != "object" && (s = {}); c = u.customFileInputSystemOptions; a = u.defaultOptions; s = o(a, s); var v = r(document.createElement("span"), [c.wrapperClass, s.wrapperClass]), f = r(document.createElement("span"), [c.buttonGroupClass, s.buttonGroupClass]), y = r(document.createElement("span"), c.buttonClass); f.appendChild(y); v.appendChild(f); t.parentNode.insertBefore(v, t); y.appendChild(t); s.fileName ? (l = document.createElement("input"), l.setAttribute("type", "text"), l.setAttribute("disabled", "disabled"), f.parentNode.insertBefore(r(l, c.fileNameClass), f), h(f, "btn-group") && r(f, e(f, "btn-group"), "input-group-btn")) : h(f, "input-group-btn") && r(f, e(f, "input-group-btn"), "btn-group"); t.parentNode.insertBefore(r(document.createElement("span"), c.buttonTextClass), t) } }, update: function (t, i, f) { var e = n.utils.unwrapObservable(i()), h, w, a, b, p, s; if (e !== !1 && (typeof e != "object" && (e = {}), h = u.customFileInputSystemOptions, w = u.defaultOptions, e = o(w, e), a = f(), a.fileInput)) { var c = n.utils.unwrapObservable(a.fileInput) || {}, l = n.utils.unwrapObservable(c.file), v = t.parentNode, y = v.parentNode, k = y.parentNode; r(v, n.utils.unwrapObservable(e.buttonClass)); b = v.querySelector("." + h.buttonTextClass); b.innerText = n.utils.unwrapObservable(l ? e.changeButtonText : e.buttonText); p = k.querySelector("." + h.fileNameClass); r(p, n.utils.unwrapObservable(e.fileNameClass)); p.value = l && l.name ? c.fileArray().length > 2 ? c.fileArray().length + " files" : c.fileArray().map(function (n) { return n.name }).join(", ") : n.utils.unwrapObservable(e.noFileText); s = y.querySelector("." + h.clearButtonClass); s || (s = r(document.createElement("span"), h.clearButtonClass), s.onclick = function () { e.onClear(c, e) }, y.appendChild(s)); s.innerText = n.utils.unwrapObservable(e.clearButtonText); r(s, n.utils.unwrapObservable(e.clearButtonClass)); l && e.clearButton && l.name || s.parentNode.removeChild(s) } } } });